プロジェクトを始める

はじめに
-------

このチュートリアルでは Advent Calendar の形式を借りて24日間にわたって Ark をつかったウェブアプリケーションの開発方法について説明します。

各章は約1時間ほどで終わる程度であり、実際のWebサイトを最初から最後までコーディングすることで Ark を学習します。

1日1時間24日で合計1日になります。これは Ark の基本を学ぶために必要な時間であると私たちは考えています。毎日、新しい機能がアプリケーションに追加され、Ark の Web 開発のベストプラクティスと同時に新しい機能を紹介するためにこの開発プロセスを利用します。

24日間で作成するアプリケーションの名前は *Jobeet* です。これは PHP のフレームワークである symfony のチュートリアルと同じです。このチュートリアルでは同じアプリケーションを Ark を使用して作成していきます。

今日はなにを？
-----------

今日は Perl コードは書きません。
しかし1行も書かないにしても新規プロジェクトをブートストラップすることで Ark のようなフレームワークを使うことの利点を理解しはじめるでしょう。

この章の目標は開発環境のセットアップとWebブラウザでアプリケーションのページを表示させることです。


前提条件
-------

Ark は Perl のフレームワークなので当然 Perl がインストールされた環境が必要です。
Ark の開発・実行には Perl 5.8.1 以上が必要です。

また、このチュートリアルではデータベースも使用します。
SQLite もしくは MySQL が使える環境であることを確認してください。

### CPAN の設定

CPAN の設定に慣れ親しんでいる人、すでに設定が終わっている人はこの項目は読み飛ばしてください。

CPAN とは Perl のモジュールのレポジトリであり、膨大な数のモジュールがアップロードされています。
Perl の開発を効率的に行うためにはこの CPAN モジュールを有効に活用するかどうかが重要になります。

CPAN モジュールは `cpan` コマンドを使用してインストールすることが出来ます。

システムの root 権限をお持ちの場合は、

    $ sudo -H cpan

と言うコマンドを実行してみてください。いままで一度も `cpan` コマンドを使用していない場合は初期設定画面になるはずです。基本的にはデフォルト設定で問題ないはずなのでそのまま進んでください。

初期設定が完了すると

    cpan> 

のような画面になると思います。これは CPAN シェルと呼ばれ、ここからモジュールをインストールすることができます。

もし、この初期設定をやり直したいという場合は CPAN シェルから

    cpan> o conf init

と入力することでいつでもやり直すことが出来ます。

#### root 権限がない場合

root 権限がない場合はユーザー領域にモジュールをインストールする必要があります。これには `local::lib` というモジュールを使用すると簡単に実現できます。

こちらの記事が詳しいのでそちらを参照してください。

> [モダンPerlの世界へようこそ：第18回　local::lib：ふだんと違う環境でPerlを使う｜gihyo.jp … 技術評論社](http://gihyo.jp/dev/serial/01/modern-perl/0018)

#### CPAN から sudo を使う

    $ sudo -H cpan

と `sudo` 経由で cpan コマンドを叩く方法を説明しましたが、cpan コマンドはユーザー権限で実行し、`make install` 時に cpan が自動で sudo を使用するという設定方法もあります。

しかし、このチュートリアルでは説明の簡略化のために `sudo -H cpan` という root 権限で cpan コマンドを叩く方法に統一して説明します。
違う方法で設定された方はその部分を適時読み替えるなどしてください。

Ark のインストール
---------------

CPAN コマンドの設定が完了したら Ark をインストールしましょう。

### ダウンロード

まずは Ark をダウンロードして展開します。

    $ wget http://cloud.github.com/downloads/typester/ark-perl/Ark-0.11.tar.gz
    $ tar -zxvf Ark-0.11.tar.gz

### 依存モジュールのインストール

展開したディレクトリに移動し、

    $ cd Ark-0.11

以下のコマンドで依存モジュールをインストールします。

    $ perl Makefile.PL
    $ sudo -H make installdeps

オプションモジュールをインストールするかどうか聞かれます。
このチュートリアルではこのオプションのうち、OpenID 認証以外の物はすべて使用しますので、yes を選択してそれらのオプションモジュールもインストールしてください。

### インストール

問題なく依存モジュールがインストールされたらいよいよ Ark をインストールしていきます。

ここで、 Ark がただしく動作するかどうかまず test をしましょう。

    $ make test

と言うコマンドを実行すると Ark 自体のテストケースが実行されます。
ここでテストが失敗する場合、お使いの環境では Ark が正常に動作しない場合があります。
依存モジュールがすべてインストールされているか再度確認し、必要であればインストールし直してみてください。

テストがすべて通ったら

    $ sudo make install

とすると Ark のインストールは完了です。これで Ark を使用する準備は整いました。


アプリケーションの作成
------------------

それではアプリケーションを作成してみましょう。Ark では `ark.pl` と言うコマンドでアプリケーションを作成します。

    $ ark.pl newapp Jobeet

と実行すると

    $ ark.pl newapp Jobeet
    Creating directory Jobeet
    Creating Jobeet/Makefile.PL
    Creating Jobeet/lib/Jobeet.pm
    Creating Jobeet/lib/Jobeet/Controller/Root.pm
    Creating directory Jobeet/root
    Creating Jobeet/t/00_compile.t
    Creating directory Jobeet/tmp

のように `Jobeet` ディレクトリが作成され、その中にアプリケーションのスケルトンが作成されます。


アプリケーションディレクトリの構成
-----------------------------

出来たスケルトンの各ディレクトリの役割は以下のようになります。

 * lib - アプリケーションコードを格納するディレクトリ
 * root - ドキュメントルート、およびテンプレートディレクトリ
 * tmp - キャッシュ、fcgiのソケットなど一時的なファイルを置くディレクトリ
 * t - アプリケーションのテストコードを置くディレクトリ

ファイルの役割は

 * Makefile.PL - Makefileを作成するスクリプト、依存モジュールの定義などを行う
 * lib/Jobeet.pm - アプリケーションメインクラス
 * lib/Jobeet/Controller/Root.pm - ルートコントローラクラス


スケルトンアプリケーションの起動
---------------------------

Ark ではテスト用の組み込みウェブサーバーをもつので、開発のためにウェブサーバーを設定する必要はありません。

以下のコマンドでスケルトンアプリケーションを起動できます。

    $ ark.pl server
    HTTP::Engine::Interface::ServerSimple : You can connect to your server at http://0.0.0.0:4423/

このような出力になったら起動完了です。ブラウザから `http://0.0.0.0:4423/` にアクセスしてみてください。

    Ark Default Index

と言う文字が表示されましたか？ これは Ark アプリケーションが正常に起動していることを示します。

`ark.pl` コマンドはこのようにアプリケーションの作成だけでなくこのようにテストサーバーを起動することや、ほかにもさまざまな機能があります。
アプリケーションの作成コマンド以外ではすべてのコマンドがアプリケーションディレクトリ内で行う必要があることを覚えておいてください。


### デバッグモード

    $ ark.pl server -d

と `-d` オプションをつけるとデバッグモードで開発サーバーが起動します。
この場合：

    $ ark.pl server -d
    [debug] Loaded Path actions:
    .-------------------------------------+--------------------------------------.
    | Path                                | Private                              |
    +-------------------------------------+--------------------------------------+
    | /                                   | /index                               |
    | /                                   | /default                             |
    '-------------------------------------+--------------------------------------'
    
    [debug] Setup finished
    HTTP::Engine::Interface::ServerSimple : You can connect to your server at http://0.0.0.0:4423/

のようにコンソールにデバッグに便利なさまざまな情報が表示されます。開発時は基本的にこのデバッグモードで開発を行うと良いでしょう。


それではまた明日！
---------------

はい、今日はここまでです。まだ Perl コードを一行も書いていませんが、Ark の開発環境をセットアップし、アプリケーションのスケルトンを作成することができました。

明日は、アプリケーションが何を行うのかを明らかにしチュートリアルの間に実装する必要のある要件を話します。



